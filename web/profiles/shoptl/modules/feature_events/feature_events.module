<?php
/**
 * @file
 * Code for the Feature Events feature.
 */

include_once 'feature_events.features.inc';

/**
 * Implements hook_preprocess_HOOK().
 */
function feature_events_preprocess_node(&$variables) {
  $node = $variables['node'];
  if ($node->type == 'shop_separator' && !empty($node->field_invisible[LANGUAGE_NONE][0]['value'])) {
    $variables['classes_array'][] = 'separator-invisible';
  }
}

/**
 * Implements hook_entity_load().
 *
 * Preload commerce products ids into event nodes.
 */
function feature_events_entity_load($entities, $type) {
  if ($type == 'node') {
    $wrapper = entity_metadata_wrapper('node');

    foreach ($entities as $entity) {
      if ($entity->type == 'event') {
        $wrapper->set($entity);

        $entity->event_products = [];
        foreach ($wrapper->field_tickets->value() as $ticket) {
          if ($ticket->type == 'ticket') {
            $wrapper->set($ticket);
            $entity->event_products[$wrapper->field_ticket->raw()] = $wrapper->title->value();
          }
        }
      }
    }
  }
}

/**
 * Implements hook_cron().
 */
function feature_events_cron() {
  $lastrun = variable_get('feature_events_cron_last', 0);
  if ($lastrun > REQUEST_TIME - 23*60*60) {
    return;
  }

  variable_set('feature_events_cron_last', REQUEST_TIME);

  // Load published events.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'event')
    ->propertyCondition('status', TRUE);
  $results = $query->execute();
  if (empty($results['node'])) {
    return;
  }
  $events = node_load_multiple(array_keys($results['node']));

  // Load new orders.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_order')
    ->propertyCondition('state', 'completed')
    ->propertyCondition('changed', $lastrun, '>')
    ->propertyOrderBy('changed', 'ASC');
  $results = $query->execute();
  $orders = [];
  if (!empty($results['commerce_order'])) {
    $orders = commerce_order_load_multiple(array_keys($results['commerce_order']));
  }

  // Prepare data.
  $data = [];
  $tickets = [];
  $wrapper = entity_metadata_wrapper('node');
  foreach ($events as $event) {
    $wrapper->set($event);
    $data[$event->nid] = [
      'title' => $event->title,
      'emails' => [],
      'orders' => [],
    ];
    foreach ($wrapper->field_managers as $manager) {
      $data[$event->nid]['emails'][] = $manager->value();
    }
    foreach ($event->event_products as $product_id => $product_title) {
      $tickets[$product_id] = [
        'title' => $product_title,
        'event' => $event->nid,
      ];
    }
  }

  $wrapper = entity_metadata_wrapper('commerce_order');
  foreach ($orders as $order) {
    $wrapper->set($order);
    foreach ($wrapper->commerce_line_items as $delta => $line_item_wrapper) {
      if ($line_item_wrapper->value()->type == 'product' && $line_item_wrapper->commerce_product->value()->type == 'ticket') {
        $cpid = $line_item_wrapper->commerce_product->raw();
        if (!empty($tickets[$cpid])) {
          if (empty($data[$tickets[$cpid]['event']]['orders'][$order->order_id])) {
            $data[$tickets[$cpid]['event']]['orders'][$order->order_id] = [
              'client' => $wrapper->commerce_customer_billing->commerce_customer_address->value()['name_line'],
              'email' => $wrapper->value()->mail,
              'products' => [],
            ];
          }
          $str = format_string('  - @countx @product', [
            '@count' => round($line_item_wrapper->value()->quantity),
            '@product' => $tickets[$cpid]['title'],
          ]);
          $data[$tickets[$cpid]['event']]['orders'][$order->order_id]['products'][] = $str;
        }
      }
    }
  }

  // Send mails.
  foreach ($data as $report) {
    if (!empty($report['emails'])) {
      drupal_mail('feature_events', 'order_report', implode(', ', $report['emails']), $GLOBALS['language']->language, $report);
    }
  }
}

/**
 * Implements hook_mail().
 */
function feature_events_mail($key, &$message, $params) {
  switch ($key) {
    case 'order_report':
      $message['subject'] = '[TLShop] Récapitulatif de commandes : ' . $params['title'];
      if (!empty($params['orders'])) {
        foreach ($params['orders'] as $order_id => $data) {
          $message['body'][] = format_string('@client (@email) [commande @order_id] :' . "\n" . '@products', [
            '@client' => $data['client'],
            '@email' => $data['email'],
            '@order_id' => $order_id,
            '@products' => implode("\n. ", $data['products'])
          ]);
        }
      }
      else {
        $message['body'][] = 'Aucune commande pour cet événement aujourd\'hui.';
      }
      break;
  }
}

// -----------------------------------------------------------------------------
// CSV export.

/**
 * Implements hook_menu().
 */
function feature_events_menu() {
  return [
    'admin/commerce/orders/tickets/%node/export' => [
      'page callback' => '_feature_events_csv_export',
      'page arguments' => [4],
      'access arguments' => ['administer commerce_order entities'],
    ],
  ];
}

/**
 * admin/commerce/orders/tickets/%node/export callback.
 *
 * @param int $event_id
 *   The event ID
 */
function _feature_events_csv_export($event) {
  // Prepare CSV headers.
  $headers = [
    'Commande', 'Date', 'Client',
  ];
  $product_index = [];
  $i = count($headers);
  foreach ($event->event_products as $product_id => $product_title) {
    $headers[$i] = $product_title;
    $product_index[$product_id] = $i;
    $i++;
  }

  // Get all commerce_line_items selling that products.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_line_item')
    ->entityCondition('bundle', 'product')
    ->fieldCondition('commerce_product', 'product_id', array_keys($event->event_products))
    ->propertyOrderBy('order_id');
  $result = $query->execute();
  $line_items = commerce_line_item_load_multiple(array_keys($result['commerce_line_item']));

  // Prepare CSV rows.
  $rows = [];
  $order_index = [];
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item');
  foreach ($line_items as $line_item) {
    $line_item_wrapper->set($line_item);
    $order = $line_item_wrapper->order->value();
    if ($order->status == 'completed') {
      $order_id = $order->order_id;
      // If we never handled this order before, prepare the row.
      if (!isset($order_index[$order_id])) {
        $order_index[$order_id] = count($rows);
        $rows[$order_index[$order_id]][] = $order_id;
        $rows[$order_index[$order_id]][] = format_date($line_item_wrapper->order->created->value(), 'custom', 'd/m/Y - H:i');
        $rows[$order_index[$order_id]][] = $line_item_wrapper->order->commerce_customer_billing->commerce_customer_address->value()['name_line'];
        foreach ($event->event_products as $product_id => $product_title) {
          $rows[$order_index[$order_id]][] = 0;
        }
      }
      $rows[$order_index[$order_id]][$product_index[$line_item_wrapper->commerce_product->raw()]] = round($line_item_wrapper->value()->quantity);
    }
  }

  header('Content-Description: File Transfer');
  header('Content-Type: application/octet-stream');
  header('Content-Disposition: attachment; filename=' . transliteration_clean_filename($event->title) . '.csv');
  header('Expires: 0');
  header('Cache-Control: must-revalidate');
  header('Pragma: public');

  $f = fopen('php://output', 'w');
  fputcsv($f, $headers);
  foreach ($rows as $row) {
    fputcsv($f, $row);
  }
  fclose($f);

  drupal_exit();
}
